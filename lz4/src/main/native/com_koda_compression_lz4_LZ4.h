/*******************************************************************************
* Copyright (c) 2013 Vladimir Rodionov. All Rights Reserved
*
* This code is released under the GNU Affero General Public License.
*
* See: http://www.fsf.org/licensing/licenses/agpl-3.0.html
*
* VLADIMIR RODIONOV MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
* OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
* IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
* NON-INFRINGEMENT. Vladimir Rodionov SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED
* BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR
* ITS DERIVATIVES.
*
* Author: Vladimir Rodionov
*
*******************************************************************************/
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "lz4.h"
#include "lz4hc.h"
/* Header for class com_koda_compression_lz4_LZ4 */

#ifndef _Included_com_koda_compression_lz4_LZ4
#define _Included_com_koda_compression_lz4_LZ4
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_koda_compression_lz4_LZ4
 * Method:    compress
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_koda_compression_lz4_LZ4_compress
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     com_koda_compression_lz4_LZ4
 * Method:    decompress
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_koda_compression_lz4_LZ4_decompress
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     com_koda_compression_lz4_LZ4
 * Method:    compressDirect
 * Signature: (Ljava/nio/ByteBuffer;IILjava/nio/ByteBuffer;I)I
 */
JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_compressDirect
  (JNIEnv *, jclass, jobject, jint, jint, jobject, jint);

JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_compressDirectHC
  (JNIEnv *, jclass, jobject, jint, jint, jobject, jint);

    JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_compressDirectAddress
    (JNIEnv *, jclass, jlong, jint, jint, jlong, jint); 
    
    JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_compressDirectAddressHC
    (JNIEnv *, jclass, jlong, jint, jint, jlong, jint); 
/*
 * Class:     com_koda_compression_lz4_LZ4
 * Method:    decompressDirect
 * Signature: (Ljava/nio/ByteBuffer;ILjava/nio/ByteBuffer;I)I
 */
JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_decompressDirect
  (JNIEnv *, jclass, jobject, jint, jint, jobject, jint);

JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_decompressDirectHC
  (JNIEnv *, jclass, jobject, jint, jint, jobject, jint);
    
    JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_decompressDirectAddress
    (JNIEnv *, jclass, jlong, jint, jint, jlong, jint);
    
    JNIEXPORT jint JNICALL Java_com_koda_compression_lz4_LZ4_decompressDirectAddressHC
    (JNIEnv *, jclass, jlong, jint, jint, jlong, jint);

#ifdef __cplusplus
}
#endif
#endif
